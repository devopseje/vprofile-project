
def COLOR_MAP = [
     'SUCCESS': 'good',
     'FAILURE': 'danger'
]
pipeline {
       agent any
       tools {
        maven 'Maven3'
        jdk 'java8'
       }

       environment {
          NEXUS_VERSION = "nexus3"
          NEXUS_PROTOCOL = "http"
          NEXUS_URL = "172.31.43.164:8081"
          NEXUS_REPOSITORY = "eje-vprofile-release"
          NEXUS_REPO_ID    = "eje-vprofile-release"
          NEXUS_CREDENTIAL_ID = "nexuslogin"
          ARTVERSION = "${env.BUILD_ID}"


        //  SNAP_REPO = 'eje-vprofile-snapshot'
       //   NEXUS_USER = 'admin'
      //    NEXUS_PASS = 'Mastereje5'
      //    RELEASE_REPO = 'eje-vprofile-release'  
      //    CENTRAL_REPO = 'eje-vpro-maven-central'
      //    NEXUSIP = '172.31.43.164'
      //    NEXUSPORT = '8081'
      //    NEXUS_GRP_REPO = 'eje-vprofile-group'
      //    NEXUS_LOGIN = 'nexuslogin'
      //    ejemaster
          SONARSERVER = 'sonarserver1'
          SONARSCANNER = 'sonarscanner'
            
       }


       stages {
            stage('build') {
               steps{
                    sh 'mvn clean  -DskipTests=true install'
               }
               post {
                    success {
                         echo 'Archiving .war datei'
                         archiveArtifacts artifacts: '**/*.war'
                    }
               }
               
            }

            stage('Test') {
               steps {
                    sh 'mvn test'
               }
            }
            stage('Checkstyle Analalyse') {
                    steps {
                         sh 'mvn checkstyle:checkstyle'
                    }
            }

            stage('Sonar Analalyse') {
               environment {
                    scannerHome = tool "${SONARSCANNER}"
               }
               steps {
                    withSonarQubeEnv("${SONARSERVER}"){
                         sh ''' ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                         -Dsonar.projectName=vprofile \
                         -Dsonar.projectVersion=1.0 \
                         -Dsonar.source=src/ \
                         -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                         -Dsonar.junit.reportsPath=target/surefire-reports/ \
                         -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                         -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml
                         
                         '''
                    }
               }
            }

            stage('Quality Gate'){
               steps{
                    timeout(time: 45, unit: 'SECONDS'){
                         waitForQualityGate abortPipeline: true
                    }
               }
            }

            stage("Publish to Nexus Repository Manager") {
               steps {
                   script {
                       pom = readMavenPom file: "pom.xml";
                       filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                       echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                       artifactPath = filesByGlob[0].path;
                       artifactExists = fileExists artifactPath;
                       if(artifactExists) {
                           echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION";
                           nexusArtifactUploader(
                               nexusVersion: NEXUS_VERSION,
                               protocol: NEXUS_PROTOCOL,
                               nexusUrl: NEXUS_URL,
                               groupId: pom.groupId,
                               version: ARTVERSION,
                               repository: NEXUS_REPOSITORY,
                               credentialsId: NEXUS_CREDENTIAL_ID,
                               artifacts: [
                                   [artifactId: pom.artifactId,
                                   classifier: '',
                                   file: artifactPath,
                                   type: pom.packaging],
                                   [artifactId: pom.artifactId,
                                   classifier: '',
                                   file: "pom.xml",
                                   type: "pom"]
                               ]
                           );
                       } 
                 else {
                           error "*** File: ${artifactPath}, could not be found";
                       }
                   }
               }
           }
          }
          post {
               always {
                    echo 'Slack Notifications'
                    slackSend channel: '#vpro-pro',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
               }
          }
       }
     
       
